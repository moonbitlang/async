// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/internal/event_loop"

import(
  "moonbitlang/async/internal/c_buffer"
)

// Values
fn close_fd(Int) -> Unit

async fn perform_job(Job, context~ : String) -> Int

fn register_hook(init? : () -> Unit, exit? : () -> Unit) -> Unit

async fn sleep(Int) -> Unit

fn with_event_loop(async () -> Unit) -> Unit raise

// Errors

// Types and methods
#external
pub type AddrInfo

type AddrInfoRef
fn AddrInfoRef::get_and_clear(Self) -> AddrInfo
fn AddrInfoRef::new() -> Self

#external
pub type Directory

#external
pub type DirectoryEntry

pub(all) enum Job {
  Read(fd~ : Int, buf~ : FixedArray[Byte], offset~ : Int, len~ : Int, can_poll~ : Bool)
  Write(fd~ : Int, buf~ : Bytes, offset~ : Int, len~ : Int, can_poll~ : Bool)
  Open(path~ : Bytes, flags~ : Int, mode~ : Int)
  Stat(path~ : Bytes, out~ : FixedArray[Byte], follow_symlink~ : Bool)
  Access(path~ : Bytes, amode~ : Int)
  Fsync(fd~ : Int, only_data~ : Bool)
  Remove(path~ : Bytes)
  Mkdir(path~ : Bytes, mode~ : Int)
  Rmdir(path~ : Bytes)
  Readdir(dir~ : Directory, out~ : Ref[DirectoryEntry])
  Realpath(path~ : Bytes, out~ : Ref[@c_buffer.Buffer])
  Spawn(path~ : Bytes, args~ : FixedArray[Bytes?], env~ : FixedArray[Bytes?], stdin~ : Int, stdout~ : Int, stderr~ : Int, cwd~ : Bytes?)
  Recvfrom(sock~ : Int, buf~ : FixedArray[Byte], offset~ : Int, len~ : Int, addr~ : Bytes)
  Sendto(sock~ : Int, buf~ : Bytes, offset~ : Int, len~ : Int, addr~ : Bytes)
  Connect(sock~ : Int, addr~ : Bytes)
  Accept(sock~ : Int, addr~ : Bytes)
  WaitProcess(Int)
  GetAddrInfo(host~ : Bytes, out~ : AddrInfoRef)
}

// Type aliases

// Traits

