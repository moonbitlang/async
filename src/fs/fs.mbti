// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/fs"

// Values
async fn create(Bytes, permission~ : Int, sync? : SyncMode) -> File raise

async fn open(Bytes, mode~ : Mode, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> File raise

fn opendir(Bytes) -> Directory raise

async fn remove(Bytes) -> Unit raise

// Errors

// Types and methods
type Directory
fn Directory::close(Self) -> Unit
async fn Directory::read_all(Self, include_hidden? : Bool, include_special? : Bool) -> Array[Bytes] raise

type File
fn File::as_dir(Self) -> Directory raise
fn File::close(Self) -> Unit
fn File::curr_pos(Self) -> Int64 raise
fn File::kind(Self) -> FileKind raise
async fn File::read(Self, FixedArray[Byte], offset? : Int, len? : Int) -> Int raise
fn File::seek(Self, Int64, mode~ : SeekMode) -> Int64 raise
fn File::size(Self) -> Int64 raise
async fn File::write(Self, Bytes, offset? : Int, len? : Int) -> Unit raise

pub(all) enum FileKind {
  Unknown
  Regular
  Directory
  SymLink
  Socket
  Pipe
  BlockDevice
  CharDevice
}
impl Show for FileKind

pub(all) enum Mode {
  ReadOnly
  WriteOnly
  ReadWrite
}

pub(all) enum SeekMode {
  FromStart
  FromEnd
  Relative
}

pub(all) enum SyncMode {
  NoSync
  Data
  Full
}

// Type aliases

// Traits

