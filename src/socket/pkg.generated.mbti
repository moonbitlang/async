// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/socket"

import(
  "moonbitlang/async/io"
)

// Values

// Errors
pub suberror InvalidAddr
fn InvalidAddr::output(Self, &Logger) -> Unit // from trait `Show`
fn InvalidAddr::to_string(Self) -> String // from trait `Show`
impl Show for InvalidAddr

pub suberror ResolveHostnameError String
fn ResolveHostnameError::output(Self, &Logger) -> Unit // from trait `Show`
fn ResolveHostnameError::to_string(Self) -> String // from trait `Show`
impl Show for ResolveHostnameError

// Types and methods
type Addr
fn Addr::compare(Self, Self) -> Int // from trait `Compare`
fn Addr::equal(Self, Self) -> Bool // from trait `Eq`
fn Addr::hash(Self) -> Int // from trait `Hash`
fn Addr::hash_combine(Self, Hasher) -> Unit // from trait `Hash`
fn Addr::ip(Self) -> UInt
fn Addr::is_ipv6(Self) -> Bool
fn Addr::new(UInt, Int) -> Self
#deprecated
fn Addr::op_equal(Self, Self) -> Bool // from trait `Eq`
fn Addr::output(Self, &Logger) -> Unit // from trait `Show`
fn Addr::parse(String) -> Self raise InvalidAddr
fn Addr::port(Self) -> Int
async fn Addr::resolve(String, port~ : Int, protocol? : IPProtocolPreference) -> Self
fn Addr::to_string(Self) -> String // from trait `Show`
impl Compare for Addr
impl Eq for Addr
impl Hash for Addr
impl Show for Addr

pub(all) enum IPProtocolPreference {
  Only_V4
  Only_V6
  Favor_V4
  Favor_V6
  No_Preference
}
fn IPProtocolPreference::output(Self, &Logger) -> Unit // from trait `Show`
fn IPProtocolPreference::to_string(Self) -> String // from trait `Show`
impl Show for IPProtocolPreference

type Tcp
fn Tcp::close(Self) -> Unit
async fn Tcp::connect(Addr) -> Self
async fn Tcp::connect_to_host(String, port~ : Int, protocol? : IPProtocolPreference) -> Self
fn Tcp::enable_keepalive(Self, idle_before_keep_alive? : Int, keep_alive_count? : Int, keep_alive_interval? : Int) -> Unit raise
async fn Tcp::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int // from trait `@io.Reader`
async fn Tcp::read_all(Self) -> &@io.Data // from trait `@io.Reader`
async fn Tcp::read_exactly(Self, Int) -> Bytes // from trait `@io.Reader`
async fn Tcp::write(Self, &@io.Data) -> Unit // from trait `@io.Writer`
async fn Tcp::write_once(Self, Bytes, offset~ : Int, len~ : Int) -> Int // from trait `@io.Writer`
async fn Tcp::write_reader(Self, &@io.Reader) -> Unit // from trait `@io.Writer`
#deprecated
async fn Tcp::write_string(Self, StringView, encoding~ : @io.Encoding) -> Unit // from trait `@io.Writer`
impl @io.Reader for Tcp
impl @io.Writer for Tcp

type TcpServer
async fn TcpServer::accept(Self) -> (Tcp, Addr)
fn TcpServer::close(Self) -> Unit
fn TcpServer::new(Addr) -> Self raise
fn TcpServer::new_dual_stack(Int) -> Self raise

type UdpClient
fn UdpClient::close(Self) -> Unit
fn UdpClient::new(Addr) -> Self raise
async fn UdpClient::recv(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int
async fn UdpClient::send(Self, Bytes, offset? : Int, len? : Int) -> Unit

type UdpServer
fn UdpServer::close(Self) -> Unit
fn UdpServer::new(Addr) -> Self raise
fn UdpServer::new_dual_stack(Int) -> Self raise
async fn UdpServer::recvfrom(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> (Int, Addr)
async fn UdpServer::sendto(Self, Bytes, Addr, offset? : Int, len? : Int) -> Unit

// Type aliases
pub typealias Tcp as TCP

pub typealias TcpServer as TCPServer

// Traits

