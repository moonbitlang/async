// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/internal/event_loop"

import(
  "moonbitlang/async/internal/fd_util"
)

// Values
async fn accept(Int, Bytes, context~ : String) -> Int

async fn access(StringView, amode~ : Int, context~ : String) -> Int

fn close_fd(Int) -> Unit

async fn connect(Int, Bytes, context~ : String) -> Int

async fn fsync(Int, only_data~ : Bool, context~ : String) -> Unit

async fn getaddrinfo(StringView, context~ : String) -> Result[AddrInfo, String]

async fn mkdir(StringView, mode~ : Int, context~ : String) -> Unit

async fn open(StringView, flags~ : Int, mode~ : Int, context~ : String) -> Int

async fn read(Int, FixedArray[Byte], offset~ : Int, len~ : Int, can_poll~ : Bool, context~ : String) -> Int

async fn readdir(Directory, context~ : String) -> DirectoryEntry

async fn realpath(StringView, context~ : String) -> Bytes

async fn recvfrom(Int, FixedArray[Byte], offset~ : Int, len~ : Int, addr~ : Bytes, context~ : String) -> Int

fn register_hook(init? : () -> Unit raise, exit? : () -> Unit raise) -> Unit

async fn remove(StringView, context~ : String) -> Unit

async fn rmdir(StringView, context~ : String) -> Unit

async fn sendto(Int, Bytes, offset~ : Int, len~ : Int, addr~ : Bytes, context~ : String) -> Int

async fn sleep(Int) -> Unit

async fn spawn(Bytes, FixedArray[Bytes?], env~ : FixedArray[Bytes?], stdin~ : Int, stdout~ : Int, stderr~ : Int, cwd~ : Bytes?, context~ : String) -> Int

async fn stat(StringView, follow_symlink~ : Bool, context~ : String) -> @fd_util.Stat

async fn wait_pid(Int) -> Unit

fn with_event_loop(async () -> Unit) -> Unit raise

async fn write(Int, Bytes, offset~ : Int, len~ : Int, can_poll~ : Bool, context~ : String) -> Int

// Errors

// Types and methods
#external
pub type AddrInfo

#external
pub type Directory

#external
pub type DirectoryEntry

// Type aliases

// Traits

