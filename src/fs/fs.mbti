// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/fs"

// Values
async fn create(Bytes, permission~ : Int, sync~ : SyncMode = ..) -> File raise

async fn open(Bytes, mode~ : Mode, sync~ : SyncMode = .., append~ : Bool = .., create? : Int, truncate~ : Bool = ..) -> File raise

async fn remove(Bytes) -> Unit raise

// Types and methods
type File
fn File::close(Self) -> Unit
fn File::curr_pos(Self) -> Int64 raise
async fn File::read(Self, FixedArray[Byte], offset~ : Int = .., len? : Int) -> Unit raise
fn File::seek(Self, Int64, mode~ : SeekMode) -> Int64 raise
fn File::size(Self) -> Int64 raise
async fn File::write(Self, Bytes, offset~ : Int = .., len? : Int) -> Unit raise

pub(all) enum Mode {
  ReadOnly
  WriteOnly
  ReadWrite
}

pub(all) enum SeekMode {
  FromStart
  FromEnd
  Relative
}

pub(all) enum SyncMode {
  NoSync
  Data
  Full
}

// Type aliases

// Traits

