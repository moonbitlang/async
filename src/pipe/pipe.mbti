package "moonbitlang/async/pipe"

// Values
fn pipe() -> (PipeRead, PipeWrite) raise

let stderr : PipeWrite

let stdin : PipeRead

let stdout : PipeWrite

// Types and methods
pub type! PipeClosed
impl Show for PipeClosed

type PipeRead
fn PipeRead::close(Self) -> Unit
async fn PipeRead::read(Self, FixedArray[Byte], offset~ : Int = .., max_len? : Int) -> Int raise
async fn PipeRead::read_exactly(Self, Int) -> Bytes raise

type PipeWrite
fn PipeWrite::close(Self) -> Unit
async fn PipeWrite::write(Self, Bytes, offset~ : Int = .., len? : Int) -> Unit raise

// Type aliases

// Traits

