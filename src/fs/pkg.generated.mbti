// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/fs"

import(
  "moonbitlang/async/io"
)

// Values
async fn atime(String, follow_symlink? : Bool) -> (Int64, Int)

async fn can_execute(String) -> Bool

async fn can_read(String) -> Bool

async fn can_write(String) -> Bool

async fn create(String, permission~ : Int, sync? : SyncMode) -> File

async fn ctime(String, follow_symlink? : Bool) -> (Int64, Int)

async fn exists(String) -> Bool

async fn kind(String, follow_symlink? : Bool) -> FileKind

async fn mkdir(String, permission~ : Int) -> Unit

async fn mtime(String, follow_symlink? : Bool) -> (Int64, Int)

async fn open(String, mode~ : Mode, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> File

fn opendir(String) -> Directory raise

async fn read_file(String, sync_timestamp? : Bool) -> &@io.Data

#deprecated
async fn read_text_file(String, encoding~ : @io.Encoding) -> String

async fn readdir(String, include_hidden? : Bool, include_special? : Bool, sort? : Bool) -> Array[String]

async fn realpath(String) -> String

async fn remove(String) -> Unit

async fn rmdir(String, recursive? : Bool) -> Unit

async fn walk(String, async (String, Array[String]) -> Unit, max_concurrency? : Int, allow_failure? : Bool) -> Unit

async fn write_file(String, &@io.Data, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

#deprecated
async fn write_text_file(String, String, encoding~ : @io.Encoding, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

// Errors

// Types and methods
type Directory
fn Directory::close(Self) -> Unit
async fn Directory::read_all(Self, include_hidden? : Bool, include_special? : Bool) -> Array[String]

type File
fn File::as_dir(Self) -> Directory raise
fn File::atime(Self) -> (Int64, Int) raise
fn File::close(Self) -> Unit
fn File::ctime(Self) -> (Int64, Int) raise
fn File::curr_pos(Self) -> Int64 raise
fn File::fd(Self) -> Int
fn File::kind(Self) -> FileKind
fn File::mtime(Self) -> (Int64, Int) raise
fn File::seek(Self, Int64, mode~ : SeekMode) -> Int64 raise
fn File::size(Self) -> Int64 raise
impl @io.Reader for File
impl @io.Writer for File

pub(all) enum FileKind {
  Unknown
  Regular
  Directory
  SymLink
  Socket
  Pipe
  BlockDevice
  CharDevice
}
impl Eq for FileKind
impl Show for FileKind

pub(all) enum Mode {
  ReadOnly
  WriteOnly
  ReadWrite
}

pub(all) enum SeekMode {
  FromStart
  FromEnd
  Relative
}

pub(all) enum SyncMode {
  NoSync
  Data
  Full
}

// Type aliases

// Traits

