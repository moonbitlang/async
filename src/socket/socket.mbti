// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/socket"

import(
  "moonbitlang/core/bytes"
)

// Values

// Errors
pub suberror InvalidAddr
impl Show for InvalidAddr

pub suberror ResolveHostnameError Int
impl Show for ResolveHostnameError

// Types and methods
type Addr
fn Addr::ip(Self) -> UInt
fn Addr::new(UInt, Int) -> Self
fn Addr::parse(String) -> Self raise InvalidAddr
fn Addr::port(Self) -> Int
async fn Addr::resolve(Bytes, port~ : Int) -> Self raise
impl Compare for Addr
impl Eq for Addr
impl Hash for Addr
impl Show for Addr

type TCP
async fn TCP::accept(Self) -> (Self, Addr) raise
fn TCP::bind(Self, Addr) -> Unit raise
fn TCP::close(Self) -> Unit
async fn TCP::connect(Self, Addr) -> Unit raise
fn TCP::enable_keepalive(Self, idle_before_keep_alive? : Int, keep_alive_count? : Int, keep_alive_interval? : Int) -> Unit raise
fn TCP::listen(Self) -> Unit raise
fn TCP::new() -> Self raise
#alias(recv, deprecated)
async fn TCP::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int raise
#deprecated
async fn TCP::recv_exactly(Self, Int) -> Bytes raise
#deprecated
async fn TCP::send(Self, @bytes.View) -> Unit raise
impl @moonbitlang/async/io.Reader for TCP
impl @moonbitlang/async/io.Writer for TCP

type UDP
fn UDP::bind(Self, Addr) -> Unit raise
fn UDP::close(Self) -> Unit
fn UDP::connect(Self, Addr) -> Unit raise
fn UDP::new() -> Self raise
async fn UDP::recv(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int raise
async fn UDP::recvfrom(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> (Int, Addr) raise
async fn UDP::send(Self, Bytes, offset? : Int, len? : Int) -> Unit raise
async fn UDP::sendto(Self, Bytes, Addr, offset? : Int, len? : Int) -> Unit raise

// Type aliases

// Traits

