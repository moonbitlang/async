// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/fs"

import(
  "moonbitlang/async/io"
)

// Values
async fn can_execute(Bytes) -> Bool

async fn can_read(Bytes) -> Bool

async fn can_write(Bytes) -> Bool

async fn create(Bytes, permission~ : Int, sync? : SyncMode) -> File

async fn exists(Bytes) -> Bool

async fn kind(Bytes) -> FileKind

async fn mkdir(Bytes, permission~ : Int) -> Unit

async fn open(Bytes, mode~ : Mode, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> File

fn opendir(Bytes) -> Directory raise

async fn read_file(Bytes) -> Bytes

async fn read_text_file(Bytes, encoding~ : @io.Encoding) -> String

async fn readdir(Bytes, include_hidden? : Bool, include_special? : Bool, sort? : Bool) -> Array[Bytes]

async fn realpath(Bytes) -> Bytes

async fn remove(Bytes) -> Unit

async fn rmdir(Bytes, recursive? : Bool) -> Unit

async fn write_file(Bytes, Bytes, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

async fn write_text_file(Bytes, String, encoding~ : @io.Encoding, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

// Errors

// Types and methods
type Directory
fn Directory::close(Self) -> Unit
async fn Directory::read_all(Self, include_hidden? : Bool, include_special? : Bool) -> Array[Bytes]

type File
fn File::as_dir(Self) -> Directory raise
fn File::close(Self) -> Unit
fn File::curr_pos(Self) -> Int64 raise
fn File::fd(Self) -> Int
fn File::kind(Self) -> FileKind
fn File::seek(Self, Int64, mode~ : SeekMode) -> Int64 raise
fn File::size(Self) -> Int64 raise
impl @io.Reader for File
impl @io.Writer for File

pub(all) enum FileKind {
  Unknown
  Regular
  Directory
  SymLink
  Socket
  Pipe
  BlockDevice
  CharDevice
}
impl Eq for FileKind
impl Show for FileKind

pub(all) enum Mode {
  ReadOnly
  WriteOnly
  ReadWrite
}

pub(all) enum SeekMode {
  FromStart
  FromEnd
  Relative
}

pub(all) enum SyncMode {
  NoSync
  Data
  Full
}

// Type aliases

// Traits

