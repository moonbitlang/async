package "moonbitlang/async"

// Values
fn close(Int) -> Unit

async fn sleep(Int) -> Unit raise

async fn wait_fd_read(Int) -> Unit raise

async fn wait_fd_write(Int) -> Unit raise

fn with_event_loop(async (TaskGroup) -> Unit raise) -> Unit raise

async fn[X] with_task_group(async (TaskGroup) -> X raise) -> X raise

// Types and methods
type AsyncValue[X]
fn[X] AsyncValue::cancel(Self[X]) -> Unit
async fn[X] AsyncValue::wait(Self[X]) -> X raise

type TaskGroup
fn[X] TaskGroup::async_value(Self, async () -> X raise) -> AsyncValue[X]
fn TaskGroup::spawn(Self, async () -> Unit raise) -> Unit

// Type aliases

// Traits

