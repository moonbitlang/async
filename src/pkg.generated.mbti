// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async"

// Values
fn now() -> Int64

async fn pause() -> Unit

async fn protect_from_cancel(async () -> Unit) -> Unit

async fn[X] retry(RetryMethod, max_retry? : Int, fatal_error? : (Error) -> Bool, async () -> X) -> X

fn run_async_main(async () -> Unit) -> Unit

async fn sleep(Int) -> Unit

#deprecated
fn with_event_loop(async (TaskGroup[Unit]) -> Unit) -> Unit raise

async fn[X] with_task_group(async (TaskGroup[X]) -> X) -> X

async fn[X] with_timeout(Int, async () -> X, error? : Error) -> X

async fn[X] with_timeout_opt(Int, async () -> X) -> X?

// Errors
pub suberror AlreadyTerminated
impl Show for AlreadyTerminated

pub suberror TimeoutError
impl Show for TimeoutError

// Types and methods
pub(all) enum RetryMethod {
  Immediate
  FixedDelay(Int)
  ExponentialDelay(initial~ : Int, factor~ : Double, maximum~ : Int)
}

type Task[X]
fn[X] Task::cancel(Self[X]) -> Unit
async fn[X] Task::wait(Self[X]) -> X

type TaskGroup[X]
fn[X] TaskGroup::add_defer(Self[X], async () -> Unit) -> Unit raise
fn[X] TaskGroup::return_immediately(Self[X], X) -> Unit raise
fn[G, X] TaskGroup::spawn(Self[G], async () -> X, no_wait? : Bool, allow_failure? : Bool) -> Task[X] raise
fn[X] TaskGroup::spawn_bg(Self[X], async () -> Unit, no_wait? : Bool, allow_failure? : Bool) -> Unit raise
fn[X] TaskGroup::spawn_loop(Self[X], async () -> IterResult, no_wait? : Bool, allow_failure? : Bool, retry? : RetryMethod, max_retry? : Int, fatal_error? : (Error) -> Bool) -> Unit raise

// Type aliases
pub typealias @moonbitlang/async/aqueue.Queue as Queue

pub typealias @moonbitlang/async/semaphore.Semaphore as Semaphore

// Traits

