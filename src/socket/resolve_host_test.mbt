// Copyright 2025 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

///|
async test "resolve localhost" {
  inspect(
    @socket.Addr::resolve("localhost", port=4200),
    content="127.0.0.1:4200",
  )
}

///|
async test "resolve mooncakes.io" {
  inspect(
    @socket.Addr::resolve("mooncakes.io", port=443),
    content="54.188.190.230:443",
  )
}

///|
async test "resolve cancel" {
  let log = StringBuilder::new()
  @async.with_task_group(fn(root) {
    let channel = @async.Queue::new()
    let task = root.spawn(allow_failure=true, fn() {
      channel.put(())
      log.write_object(@socket.Addr::resolve("does.not.exist", port=443))
    })
    channel.get() // make sure the task already started
    task.cancel()
    log.write_string("host resolution cancelled\n")
  })
  inspect(
    log.to_string(),
    content=(
      #|host resolution cancelled
      #|
    ),
  )
}

///|
async test "resolve failure" {
  let result = try? @socket.Addr::resolve("does.not.exist", port=443)
  assert_true(result is Err(@socket.ResolveHostnameError(_)))
}
