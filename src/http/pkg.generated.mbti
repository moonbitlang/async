// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/http"

import(
  "moonbitlang/async/io"
  "moonbitlang/async/socket"
)

// Values
async fn get(String, headers? : Map[String, String], port? : Int, body? : &@io.Data) -> (Response, &@io.Data)

async fn post(String, &@io.Data, headers? : Map[String, String], port? : Int) -> (Response, &@io.Data)

async fn put(String, &@io.Data, headers? : Map[String, String], port? : Int) -> (Response, &@io.Data)

// Errors
pub suberror HttpProtocolError {
  BadRequest
  HttpVersionNotSupported(String)
  NotImplemented
}
fn HttpProtocolError::output(Self, &Logger) -> Unit // from trait `Show`
fn HttpProtocolError::to_string(Self) -> String // from trait `Show`
impl Show for HttpProtocolError

pub suberror URIParseError {
  InvalidFormat
  UnsupportedProtocol(String)
}
fn URIParseError::output(Self, &Logger) -> Unit // from trait `Show`
fn URIParseError::to_string(Self) -> String // from trait `Show`
impl Show for URIParseError

// Types and methods
type Client
fn Client::close(Self) -> Unit
async fn Client::connect(String, headers? : Map[String, String], protocol? : Protocol, port? : Int) -> Self
async fn Client::end_request(Self) -> Response
async fn Client::flush(Self) -> Unit
async fn Client::get(Self, String, extra_headers? : Map[String, String], body? : &@io.Data) -> Response
async fn Client::post(Self, String, &@io.Data, extra_headers? : Map[String, String]) -> Response
async fn Client::put(Self, String, &@io.Data, extra_headers? : Map[String, String]) -> Response
async fn Client::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int // from trait `@io.Reader`
async fn Client::read_all(Self) -> &@io.Data // from trait `@io.Reader`
async fn Client::read_exactly(Self, Int) -> Bytes // from trait `@io.Reader`
async fn Client::request(Self, RequestMethod, String, extra_headers? : Map[String, String]) -> Unit
async fn Client::skip_response_body(Self) -> Unit
async fn Client::write(Self, &@io.Data) -> Unit // from trait `@io.Writer`
async fn Client::write_once(Self, Bytes, offset~ : Int, len~ : Int) -> Int // from trait `@io.Writer`
async fn Client::write_reader(Self, &@io.Reader) -> Unit // from trait `@io.Writer`
#deprecated
async fn Client::write_string(Self, StringView, encoding~ : @io.Encoding) -> Unit // from trait `@io.Writer`
impl @io.Reader for Client
impl @io.Writer for Client

pub(all) enum Protocol {
  Http
  Https
}
fn Protocol::default_port(Self) -> Int

pub(all) struct Request {
  meth : RequestMethod
  path : String
  headers : Map[String, String]
}

pub(all) enum RequestMethod {
  Get
  Head
  Post
  Put
  Delete
  Connect
  Options
  Trace
  Patch
}
fn RequestMethod::output(Self, &Logger) -> Unit // from trait `Show`
fn RequestMethod::to_string(Self) -> String // from trait `Show`
impl Show for RequestMethod

pub(all) struct Response {
  code : Int
  reason : String
  headers : Map[String, String]
}

type ServerConnection
fn ServerConnection::close(Self) -> Unit
async fn ServerConnection::end_response(Self) -> Unit
async fn ServerConnection::flush(Self) -> Unit
fn ServerConnection::new(@socket.TCP, headers? : Map[String, String]) -> Self
async fn ServerConnection::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int // from trait `@io.Reader`
async fn ServerConnection::read_all(Self) -> &@io.Data // from trait `@io.Reader`
async fn ServerConnection::read_exactly(Self, Int) -> Bytes // from trait `@io.Reader`
async fn ServerConnection::read_request(Self) -> Request
async fn ServerConnection::send_response(Self, Int, String, extra_headers? : Map[String, String]) -> Unit
async fn ServerConnection::skip_request_body(Self) -> Unit
async fn ServerConnection::write(Self, &@io.Data) -> Unit // from trait `@io.Writer`
async fn ServerConnection::write_once(Self, Bytes, offset~ : Int, len~ : Int) -> Int // from trait `@io.Writer`
async fn ServerConnection::write_reader(Self, &@io.Reader) -> Unit // from trait `@io.Writer`
#deprecated
async fn ServerConnection::write_string(Self, StringView, encoding~ : @io.Encoding) -> Unit // from trait `@io.Writer`
impl @io.Reader for ServerConnection
impl @io.Writer for ServerConnection

// Type aliases

// Traits

