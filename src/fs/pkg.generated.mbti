// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/fs"

import(
  "moonbitlang/async/io"
)

// Values
async fn atime(StringView, follow_symlink? : Bool) -> (Int64, Int)

async fn can_execute(StringView) -> Bool

async fn can_read(StringView) -> Bool

async fn can_write(StringView) -> Bool

async fn create(StringView, permission~ : Int, sync? : SyncMode) -> File

async fn ctime(StringView, follow_symlink? : Bool) -> (Int64, Int)

async fn exists(StringView) -> Bool

async fn kind(StringView, follow_symlink? : Bool) -> FileKind

async fn mkdir(StringView, permission~ : Int) -> Unit

async fn mtime(StringView, follow_symlink? : Bool) -> (Int64, Int)

async fn open(StringView, mode~ : Mode, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> File

fn opendir(StringView) -> Directory raise

async fn read_file(StringView, sync_timestamp? : Bool) -> &@io.Data

#deprecated
async fn read_text_file(StringView, encoding~ : @io.Encoding) -> String

async fn readdir(StringView, include_hidden? : Bool, include_special? : Bool, sort? : Bool) -> Array[String]

async fn realpath(StringView) -> String

async fn remove(StringView) -> Unit

async fn rmdir(StringView, recursive? : Bool) -> Unit

async fn walk(StringView, async (String, Array[String]) -> Unit, max_concurrency? : Int, allow_failure? : Bool) -> Unit

async fn write_file(StringView, &@io.Data, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

#deprecated
async fn write_text_file(StringView, String, encoding~ : @io.Encoding, sync? : SyncMode, append? : Bool, create? : Int, truncate? : Bool) -> Unit

// Errors

// Types and methods
type Directory
fn Directory::close(Self) -> Unit
async fn Directory::read_all(Self, include_hidden? : Bool, include_special? : Bool) -> Array[String]

type File
fn File::as_dir(Self) -> Directory raise
fn File::atime(Self) -> (Int64, Int) raise
fn File::close(Self) -> Unit
fn File::ctime(Self) -> (Int64, Int) raise
fn File::curr_pos(Self) -> Int64 raise
fn File::fd(Self) -> Int
fn File::kind(Self) -> FileKind
fn File::mtime(Self) -> (Int64, Int) raise
async fn File::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int // from trait `@io.Reader`
async fn File::read_all(Self) -> &@io.Data // from trait `@io.Reader`
async fn File::read_exactly(Self, Int) -> Bytes // from trait `@io.Reader`
fn File::seek(Self, Int64, mode~ : SeekMode) -> Int64 raise
fn File::size(Self) -> Int64 raise
async fn File::sync(Self, only_data? : Bool) -> Unit
async fn File::write(Self, &@io.Data) -> Unit // from trait `@io.Writer`
async fn File::write_once(Self, Bytes, offset~ : Int, len~ : Int) -> Int // from trait `@io.Writer`
async fn File::write_reader(Self, &@io.Reader) -> Unit // from trait `@io.Writer`
#deprecated
async fn File::write_string(Self, StringView, encoding~ : @io.Encoding) -> Unit // from trait `@io.Writer`
impl @io.Reader for File
impl @io.Writer for File

pub(all) enum FileKind {
  Unknown
  Regular
  Directory
  SymLink
  Socket
  Pipe
  BlockDevice
  CharDevice
}
fn FileKind::equal(Self, Self) -> Bool // from trait `Eq`
#deprecated
fn FileKind::op_equal(Self, Self) -> Bool // from trait `Eq`
fn FileKind::output(Self, &Logger) -> Unit // from trait `Show`
fn FileKind::to_string(Self) -> String // from trait `Show`
impl Eq for FileKind
impl Show for FileKind

pub(all) enum Mode {
  ReadOnly
  WriteOnly
  ReadWrite
}

pub(all) enum SeekMode {
  FromStart
  FromEnd
  Relative
}

pub(all) enum SyncMode {
  NoSync
  Data
  Full
}

// Type aliases

// Traits

