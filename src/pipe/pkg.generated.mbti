// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/async/pipe"

import(
  "moonbitlang/async/io"
)

// Values
fn pipe() -> (PipeRead, PipeWrite) raise

let stderr : PipeWrite

let stdin : PipeRead

let stdout : PipeWrite

// Errors

// Types and methods
type PipeRead
fn PipeRead::close(Self) -> Unit
fn PipeRead::fd(Self) -> Int
async fn PipeRead::read(Self, FixedArray[Byte], offset? : Int, max_len? : Int) -> Int // from trait `@io.Reader`
async fn PipeRead::read_all(Self) -> &@io.Data // from trait `@io.Reader`
async fn PipeRead::read_exactly(Self, Int) -> Bytes // from trait `@io.Reader`
impl @io.Reader for PipeRead

type PipeWrite
fn PipeWrite::close(Self) -> Unit
fn PipeWrite::fd(Self) -> Int
async fn PipeWrite::write(Self, &@io.Data) -> Unit // from trait `@io.Writer`
async fn PipeWrite::write_once(Self, Bytes, offset~ : Int, len~ : Int) -> Int // from trait `@io.Writer`
async fn PipeWrite::write_reader(Self, &@io.Reader) -> Unit // from trait `@io.Writer`
#deprecated
async fn PipeWrite::write_string(Self, StringView, encoding~ : @io.Encoding) -> Unit // from trait `@io.Writer`
impl @io.Writer for PipeWrite

// Type aliases

// Traits

